{
    "version": "https://jsonfeed.org/version/1",
    "title": "樱凌轩的博客 • All posts by \"gulp\" tag",
    "description": "",
    "home_page_url": "https://yinglingxuan.github.io",
    "items": [
        {
            "id": "https://yinglingxuan.github.io/2020/07/06/Gulp%E9%85%8D%E7%BD%AE/",
            "url": "https://yinglingxuan.github.io/2020/07/06/Gulp%E9%85%8D%E7%BD%AE/",
            "title": "Gulp配置",
            "date_published": "2020-07-06T08:24:57.000Z",
            "content_html": "<h1 id=\"gulpsettingdemo\"><a class=\"markdownIt-Anchor\" href=\"#gulpsettingdemo\"></a> gulpSettingDemo</h1>\n<h1 id=\"gulp常用的配置和演示\"><a class=\"markdownIt-Anchor\" href=\"#gulp常用的配置和演示\"></a> gulp常用的配置和演示</h1>\n<h1 id=\"对应的插件\"><a class=\"markdownIt-Anchor\" href=\"#对应的插件\"></a> 对应的插件</h1>\n<pre><code>var gulp = require('gulp');\nvar concat = require('gulp-concat');  //合并文件，减少网络请求。\nvar header = require('gulp-header');\nvar notify = require(&quot;gulp-notify&quot;);  //显示报错信息和报错后不终止当前gulp任务。\nvar connect = require(&quot;gulp-connect&quot;); //这个gulp-connect启动服务器（并能时时同步）。\nvar sass = require(&quot;gulp-sass&quot;);\nvar autoprefixer = require('gulp-autoprefixer');  //插件可以根据我们的设置帮助我们自动补全浏览器的前缀(如：-moz、-ms、-webkit、-o)\nvar webserver = require('gulp-webserver');//是开启服务器，通常和gulp-livereload结合使用\nvar livereload = require('gulp-livereload');  //配置热加载,网页刷新\nvar sourcemaps = require('gulp-sourcemaps');  //就是文件压缩后不利于查看与调试，但是有了sourcemap，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码）\nvar plumber = require('gulp-plumber');//可以阻止 gulp 插件发生错误导致进程退出并输出错误日志\nvar ext_replace = require('gulp-ext-replace');  //用于更改文件扩展名。\nvar cssmin = require('gulp-cssmin');\nvar uglify = require('gulp-uglify');  //压缩\nvar spritesmith = require(&quot;gulp.spritesmith&quot;)//配置雪碧图的插件\n</code></pre>\n<h1 id=\"对应插件的使用\"><a class=\"markdownIt-Anchor\" href=\"#对应插件的使用\"></a> <strong>对应插件的使用</strong></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;运行错误后自动中断执行</span><br><span class=\"line\"></span><br><span class=\"line\">var onError &#x3D; function (err) &#123;  &#x2F;&#x2F;设置异常</span><br><span class=\"line\">    notify.onError(&#123;</span><br><span class=\"line\">   \t \ttitle: &quot;Gulp&quot;,</span><br><span class=\"line\">    \tsubtitle: &quot;Failure!&quot;,</span><br><span class=\"line\">   \t\tmessage: &quot;Error: &lt;%&#x3D; error.message %&gt;&quot;,</span><br><span class=\"line\">    \tsound: &quot;Beep&quot;</span><br><span class=\"line\">    &#125;)(err);</span><br><span class=\"line\">    this.emit(&#39;end&#39;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var scripts &#x3D; [</span><br><span class=\"line\">\t&#39;.&#x2F;src&#x2F;lib&#x2F;modal.js&#39;,</span><br><span class=\"line\">\t&#39;.&#x2F;src&#x2F;lib&#x2F;hotcss.js&#39;</span><br><span class=\"line\">\t&#x2F;&#x2F; &#39;.&#x2F;src&#x2F;lib&#x2F;star-rating.js&#39;</span><br><span class=\"line\">];</span><br><span class=\"line\">&#x2F;&#x2F;合并js插件</span><br><span class=\"line\">gulp.task(&#39;scripts&#39;, function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t \treturn gulp.src(scripts)</span><br><span class=\"line\">    \t.pipe(concat(&#39;lib.js&#39;))   &#x2F;&#x2F;合并后的文件名</span><br><span class=\"line\">    \t.pipe(gulp.dest(&#39;dist&#x2F;js&#39;)) &#x2F;&#x2F;开两个为两个流</span><br><span class=\"line\">    \t&#x2F;&#x2F; .pipe(uglify())</span><br><span class=\"line\">    \t.pipe(gulp.dest(&#39;dist&#x2F;js&#39;)); &#x2F;&#x2F;第二个下标的目录</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;编译sass文件</span><br><span class=\"line\">gulp.task(&#39;sass&#39;, function () &#123;</span><br><span class=\"line\">\treturn gulp.src([&#39;.&#x2F;src&#x2F;style&#x2F;*.css&#39;])</span><br><span class=\"line\">\t.pipe(plumber(&#123; &#x2F;&#x2F;处理异常</span><br><span class=\"line\"></span><br><span class=\"line\">   \t \terrorHandler: onError</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    &#x2F;&#x2F; .pipe(sass()) &#x2F;&#x2F;把scss转为css</span><br><span class=\"line\">    &#x2F;&#x2F; .pipe(sourcemaps.init())&#x2F;&#x2F;生产时候启用，部署时取消</span><br><span class=\"line\">    \t.pipe(autoprefixer([   &#x2F;&#x2F;浏览器的版本</span><br><span class=\"line\">    \t\t&#39;last 2 versions&#39;,</span><br><span class=\"line\">    \t\t&#39;ff &gt;&#x3D; 30&#39;,</span><br><span class=\"line\">    \t\t&#39;chrome &gt;&#x3D; 34&#39;,</span><br><span class=\"line\">    \t\t&#39;ios &gt;&#x3D; 6&#39;,</span><br><span class=\"line\">    \t\t&#39;android &gt;&#x3D; 4.4&#39;,</span><br><span class=\"line\">    \t\t&#39;and_uc 9.9&#39;,</span><br><span class=\"line\">    \t\t&#39;IE &gt;&#x3D; 6&#39; </span><br><span class=\"line\">    ]))</span><br><span class=\"line\">    &#x2F;&#x2F; .pipe(sourcemaps.write())</span><br><span class=\"line\">    &#x2F;&#x2F; .pipe (cssmin())</span><br><span class=\"line\">    \t.pipe(concat(&#39;style.css&#39;))</span><br><span class=\"line\">    \t.pipe(gulp.dest(&#39;.&#x2F;dist&#x2F;css&#x2F;&#39;))</span><br><span class=\"line\">    \t.pipe(livereload());</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<pre><code>// 合并js\ngulp.task('customJs', function () {\n\treturn gulp.src('./src/js/*.js')\n\t.pipe(plumber({\n\terrorHandler: onError\n}))\n\t.pipe(uglify()) //压缩文件，部署时启用\n\t.pipe(concat('custom.js'))\n\t.pipe(gulp.dest('./dist/js'));\n});\n\nvar replace = require('gulp-replace');\nvar fs = require(&quot;fs&quot;);\n//公共html部分\ngulp.task('include', function () {\n\tvar htmlDir = './dist/demos/';\n\tfs.readdir(htmlDir, function (err, files) {\n    \tif (err) {\n\t    \tconsole.log(err);\n\t    } else {\n\t    \tfiles.forEach(function (f) {\n\t    \t\tif (f !== '_header.html' &amp;&amp; f !== '_footer.html') {\n\t   \t\t\t\t gulp.src(htmlDir + f)\n\t    \t\t\t.pipe(replace(/&lt;!--header--&gt;[\\s\\S]*&lt;!--headerend--&gt;/, '&lt;!--header--&gt;\\n' + fs.readFileSync(htmlDir + '_header.html', 'utf-8') + '\\n&lt;!--headerend--&gt;'))\n\t    \t\t\t.pipe(replace(/&lt;!--footer--&gt;[\\s\\S]*&lt;!--footerend--&gt;/, '&lt;!--footer--&gt;\\n' + fs.readFileSync(htmlDir + '_footer.html', 'utf-8') + '\\n&lt;!--footerend--&gt;'))\n\t    \t\t\t.pipe(gulp.dest(htmlDir))\n\t    \t\t}\n\t    \t});\n\t    }\n    });\n});\n\n//搭建本地服务器\ngulp.task('webserver', function () {\n\tgulp.src('./dist')\n\t.pipe(plumber({\n\terrorHandler: onError\n}))\n\t.pipe(webserver({\n    \tport: 8124,\n    \tlivereload: true,\n    \tdirectoryListing: false,\n    \topen: true\n\t}));\n});\n\n//配置雪碧图\ngulp.task('sprites', function () {\nreturn gulp.src('./src/imgs/*.png')//需要合并的图片地址\n\t\t.pipe(plumber({\n\t\t\terrorHandler: onError\n\t\t}))\n    .pipe(spritesmith({\n\t    imgName: 'demo.png',//保存合并后图片的地址\n\t    cssName: './dist/css/sprites.css',//保存合并后对于css样式的地址\n\t    padding:5,//合并时两个图片的间距\n\t    algorithm: 'binary-tree',//注释1\n\t    // cssTemplate:&quot;css/handlebarsStr.css&quot;//注释2\n    }))\n    \t.pipe(gulp.dest('./dist/images/'));\n    });\n\ngulp.task(&quot;default&quot;, ['webserver', 'watch', 'sass', 'scripts', 'customJs','sprites']);\n\n//监听项目 即时刷新\ngulp.task('watch', function () {\n    livereload.listen();  //监听页面刷新\n    gulp.watch('./src/js/*.js', ['customJs']);  //刷新文件 watch 刷新的工具类\n    gulp.watch('./src/lib/*.js', ['scripts']);\n    gulp.watch('./src/style/*.css',['sass']);\n    // gulp.watch(['./dist/demos/_header.html','./dist/demos/_footer.html'], ['include']);  //公共HTML\n});</code></pre>\n",
            "tags": [
                "Gulp",
                "JavaScript",
                "css"
            ]
        }
    ]
}