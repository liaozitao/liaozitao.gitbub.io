{
    "version": "https://jsonfeed.org/version/1",
    "title": "樱凌轩的博客 • All posts by \"java\" tag",
    "description": "",
    "home_page_url": "https://yinglingxuan.github.io",
    "items": [
        {
            "id": "https://yinglingxuan.github.io/2020/07/06/Springboot%20%E5%92%8CMybatis%E9%85%8D%E7%BD%AE/",
            "url": "https://yinglingxuan.github.io/2020/07/06/Springboot%20%E5%92%8CMybatis%E9%85%8D%E7%BD%AE/",
            "title": "Spring boot 和 Mybatis配置",
            "date_published": "2020-07-06T08:24:57.000Z",
            "content_html": "<h1 id=\"spring-boot项目运行\"><a class=\"markdownIt-Anchor\" href=\"#spring-boot项目运行\"></a> Spring boot项目运行</h1>\n<p><strong>方式1 可以直接软件里面运行</strong></p>\n<p><strong>方式2 ：可以使用命令在当前的项目下运行 ： 用命令启动,到项目目录下面。运行:mvn spring-boot:run</strong></p>\n<p><strong>方式3:mvn install,然后可以在项目下面的&quot;target&quot;目录下面看到项目de jar文件<br />\njava -jar girl-0.0.0.1-snapshot.jar</strong></p>\n<h1 id=\"项目属性配置\"><a class=\"markdownIt-Anchor\" href=\"#项目属性配置\"></a> 项目属性配置</h1>\n<p><strong>Application.java<br />\n每次可以通过运行该类，启动服务。</strong></p>\n<p><strong>配置文件application.properties和application.yml任意一个就行</strong></p>\n<h2 id=\"applicationproperties中配置\"><a class=\"markdownIt-Anchor\" href=\"#applicationproperties中配置\"></a> application.properties中配置</h2>\n<p><strong>server.port=8081    端口</strong></p>\n<p><strong>server.context-path=/girl   端口路径</strong></p>\n<h2 id=\"applicationyml中配置\"><a class=\"markdownIt-Anchor\" href=\"#applicationyml中配置\"></a> application.yml中配置</h2>\n<p><strong>这个文件是自己新建的，名字一定要这样命名才有效</strong></p>\n<pre><code>server:\n  port: 8081 端口\n  context-path: /girl   //访问路径\n</code></pre>\n<p>项目访问路径是:<a href=\"http://localhost:8080/girl/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/girl/hello</a></p>\n<h1 id=\"controller的使用\"><a class=\"markdownIt-Anchor\" href=\"#controller的使用\"></a> Controller的使用</h1>\n<p><strong>@Controller:处理http请求</strong></p>\n<p><strong>@RestController:Spring4之后新加的注解，原来返回json需要</strong></p>\n<p><strong>@ResponseBody配合@Controller</strong></p>\n<p><strong>@RequestMapping:配置url映射</strong></p>\n<h2 id=\"1-controller类使用举例\"><a class=\"markdownIt-Anchor\" href=\"#1-controller类使用举例\"></a> 1. @Controller类使用举例</h2>\n<pre><code>pom.xml增加\n\n&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n访问类中配置\n@RequestMapping(value={&quot;/hello&quot;,&quot;/hi&quot;},method=RequestMethod.GET)\n映射了两个地址\n@PathVariable:获取url中的数据\n@RequestParam:获取请求参数的值\n@GetMapping:组合注解\n\nController的写法\n@RequestMapping(value=&quot;/hello/{id}&quot;,method=RequestMethod.GET)\npublic String say(@PathVariable(&quot;id&quot;) Integer id){\n\treturn &quot;id:&quot;+id;\n}\n访问路径：http://localhost:8081/hello/44\n</code></pre>\n<h2 id=\"情况二-controller的写法\"><a class=\"markdownIt-Anchor\" href=\"#情况二-controller的写法\"></a> 情况二 Controller的写法</h2>\n<pre><code>@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.GET)\npublic String say(@RequestParam(&quot;id&quot;) Integer id){\n\treturn &quot;id:&quot;+id;\n}\n访问路径:http://localhost:8081/hello?id=2\nid为空会报错。那么下面设置可以避免  设置默认值\n\n/*@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.GET)*/\n/*简化RequestMethod.GET方式。同理还有@PostMapping*/\n@GetMapping(value=&quot;/hello&quot;)\npublic String say(@RequestParam(value=&quot;id&quot;,required=false,defaultValue = &quot;0&quot;) Integer id){ \n\treturn &quot;id:&quot;+id;\n}\n</code></pre>\n<h1 id=\"mybatis配置\"><a class=\"markdownIt-Anchor\" href=\"#mybatis配置\"></a> Mybatis配置</h1>\n<h2 id=\"导入对应的包\"><a class=\"markdownIt-Anchor\" href=\"#导入对应的包\"></a> 导入对应的包</h2>\n<pre><code>mybatis的包\n&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n\t&lt;version&gt;1.3.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n\nmybatis的jdbc的整合包\n&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;mysql&lt;/groupId&gt;\n\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n\t&lt;version&gt;8.0.11&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n在idea中要再导入\n&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;junit&lt;/groupId&gt;\n\t&lt;artifactId&gt;junit&lt;/artifactId&gt;\n\t&lt;version&gt;4.12&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h2 id=\"1-然后再applicationproperties中配置连接数据库的数据和账号密码\"><a class=\"markdownIt-Anchor\" href=\"#1-然后再applicationproperties中配置连接数据库的数据和账号密码\"></a> 1 然后再application.properties中配置连接数据库的数据和账号密码</h2>\n<pre><code>mybatis.type-aliases-package=com.neo.entity\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://127.0.0.1:3307/lxdome?characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC\nspring.datasource.username = root\nspring.datasource.password = 123456\n\nspringboot会自动加载spring.datasource.*相关配置，数据源就会自动注入到sqlSessionFactory中，sqlSessionFactory会自动注入到Mapper中，对了你一切都不用管了，直接拿起来使用就行了。\n</code></pre>\n<h2 id=\"2-在启动类中添加对mapper包扫描mapperscan\"><a class=\"markdownIt-Anchor\" href=\"#2-在启动类中添加对mapper包扫描mapperscan\"></a> 2 在启动类中添加对mapper包扫描@MapperScan</h2>\n<pre><code>@SpringBootApplication\n@MapperScan(&quot;com.neo.mapper&quot;)\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n或者直接在Mapper类上面添加注解@Mapper,建议使用上面那种直接扫描包，不然每个mapper加个注解也挺麻烦的\n</code></pre>\n<h2 id=\"3第一种配置方式-注解类配置-开发mapper注解的方式\"><a class=\"markdownIt-Anchor\" href=\"#3第一种配置方式-注解类配置-开发mapper注解的方式\"></a> 3第一种配置方式 注解类配置  开发Mapper注解的方式</h2>\n<p><strong>定义使用的链接xml的接口类</strong>   注意数据的实体类创建</p>\n<blockquote>\n<p>第三步是最关键的一块，sql生产都在这里</p>\n</blockquote>\n<pre><code>public interface UserMapper {\n@Select(&quot;SELECT * FROM users&quot;)\n@Results({              对应参数注解\n\t@Result(property = &quot;userSex&quot;,  column = &quot;user_sex&quot;, javaType = UserSexEnum.class),\n\t@Result(property = &quot;nickName&quot;, column = &quot;nick_name&quot;)\n})\nList&lt;UserEntity&gt; getAll();\n\n@Select(&quot;SELECT * FROM users WHERE id = #{id}&quot;)\n@Results({\n\t@Result(property = &quot;userSex&quot;,  column = &quot;user_sex&quot;, javaType = UserSexEnum.class),\n\t@Result(property = &quot;nickName&quot;, column = &quot;nick_name&quot;)\n})\nUserEntity getOne(Long id);\n\n@Insert(&quot;INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName}, #{passWord}, #{userSex})&quot;)\nvoid insert(UserEntity user);\n\n@Update(&quot;UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id =#{id}&quot;)\nvoid update(UserEntity user);\n\n@Delete(&quot;DELETE FROM users WHERE id =#{id}&quot;)\nvoid delete(Long id);\n}\n\n@Select 是查询类的注解，所有的查询均使用这个\n@Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。\n@Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值\n@Update 负责修改，也可以直接传入对象\n@delete 负责删除\n</code></pre>\n<h2 id=\"访问层使用\"><a class=\"markdownIt-Anchor\" href=\"#访问层使用\"></a> 访问层使用</h2>\n<p><strong>上面三步就基本完成了相关dao层开发，使用的时候当作普通的类注入进入就可以了</strong></p>\n<pre><code>@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class UserMapperTest {\n\t@Autowired  直接注入\n\tprivate UserMapper UserMapper;\n\n\t@Test\n\tpublic void testInsert() throws Exception {\n\t\tUserMapper.insert(new UserEntity(&quot;aa&quot;, &quot;a123456&quot;, UserSexEnum.MAN));\n\t\tUserMapper.insert(new UserEntity(&quot;bb&quot;, &quot;b123456&quot;, UserSexEnum.WOMAN));\n\t\tUserMapper.insert(new UserEntity(&quot;cc&quot;, &quot;b123456&quot;, UserSexEnum.WOMAN));\n\n\t\tAssert.assertEquals(3, UserMapper.getAll().size());\n\t}\n\n\t@Test\n\tpublic void testQuery() throws Exception {\n\t\tList&lt;UserEntity&gt; users = UserMapper.getAll();\n\t\tSystem.out.println(users.toString());\n\t}\n\n\t@Test\n\tpublic void testUpdate() throws Exception {\n\t\tUserEntity user = UserMapper.getOne(3l);\n\t\tSystem.out.println(user.toString());\n\t\tuser.setNickName(&quot;neo&quot;);\n\t\tUserMapper.update(user);\n\t\tAssert.assertTrue((&quot;neo&quot;.equals(UserMapper.getOne(3l).getNickName())));\n\t}}\n}\n</code></pre>\n<h1 id=\"使用xml-的方式\"><a class=\"markdownIt-Anchor\" href=\"#使用xml-的方式\"></a> 使用xml 的方式</h1>\n<p><strong>极简xml版本</strong></p>\n<p><strong>极简xml版本保持映射文件的老传统，优化主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找对应的sql.</strong><br />\n1、配置<br />\n<strong>pom文件和上个版本一样，只是application.properties新增以下配置</strong><br />\n<strong>mybatis.config-locations=classpath:mybatis/mybatis-config.xml   xml文件的位置l</strong><br />\n<strong>mybatis.mapper-locations=classpath:mybatis/mapper/*.xml     多个xml文件的位置</strong><br />\n<strong>指定了mybatis基础配置文件和实体类映射文件的地址</strong><br />\nmybatis-config.xml 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">\t    &lt;typeAlias alias&#x3D;&quot;Integer&quot; type&#x3D;&quot;java.lang.Integer&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;typeAlias alias&#x3D;&quot;Long&quot; type&#x3D;&quot;java.lang.Long&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;typeAlias alias&#x3D;&quot;HashMap&quot; type&#x3D;&quot;java.util.HashMap&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;typeAlias alias&#x3D;&quot;LinkedHashMap&quot; type&#x3D;&quot;java.util.LinkedHashMap&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;typeAlias alias&#x3D;&quot;ArrayList&quot; type&#x3D;&quot;java.util.ArrayList&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;typeAlias alias&#x3D;&quot;LinkedList&quot; type&#x3D;&quot;java.util.LinkedList&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;typeAliases&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>​    这里也可以添加一些mybatis基础的配置<br />\n​    2、添加User的映射文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace&#x3D;&quot;com.neo.mapper.UserMapper&quot; &gt;</span><br><span class=\"line\">    &lt;resultMap id&#x3D;&quot;BaseResultMap&quot; type&#x3D;&quot;com.neo.entity.UserEntity&quot; &gt;</span><br><span class=\"line\">\t    &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot; jdbcType&#x3D;&quot;BIGINT&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;result column&#x3D;&quot;userName&quot; property&#x3D;&quot;userName&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;result column&#x3D;&quot;passWord&quot; property&#x3D;&quot;passWord&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;</span><br><span class=\"line\">\t    &lt;result column&#x3D;&quot;user_sex&quot; property&#x3D;&quot;userSex&quot; javaType&#x3D;&quot;com.neo.enums.UserSexEnum&quot;&#x2F;&gt;</span><br><span class=\"line\">\t    &lt;result column&#x3D;&quot;nick_name&quot; property&#x3D;&quot;nickName&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​</p>\n<p>​    这里也可以添加一些mybatis基础的配置<br />\n​    2、添加User的映射文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace&#x3D;&quot;com.neo.mapper.UserMapper&quot; &gt;</span><br><span class=\"line\"> &lt;resultMap id&#x3D;&quot;BaseResultMap&quot; type&#x3D;&quot;com.neo.entity.UserEntity&quot; &gt;</span><br><span class=\"line\">  &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot; jdbcType&#x3D;&quot;BIGINT&quot; &#x2F;&gt;</span><br><span class=\"line\">  &lt;result column&#x3D;&quot;userName&quot; property&#x3D;&quot;userName&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;</span><br><span class=\"line\">  &lt;result column&#x3D;&quot;passWord&quot; property&#x3D;&quot;passWord&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;</span><br><span class=\"line\">  &lt;result column&#x3D;&quot;user_sex&quot; property&#x3D;&quot;userSex&quot; javaType&#x3D;&quot;com.neo.enums.UserSexEnum&quot;&#x2F;&gt;</span><br><span class=\"line\">  &lt;result column&#x3D;&quot;nick_name&quot; property&#x3D;&quot;nickName&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;</span><br><span class=\"line\"> &lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​</p>\n<pre><code>    &lt;sql id=&quot;Base_Column_List&quot; &gt;\n    \tid, userName, passWord, user_sex, nick_name\n    &lt;/sql&gt;\n    \n    &lt;select id=&quot;getAll&quot; resultMap=&quot;BaseResultMap&quot;  &gt;\n       SELECT \n       &lt;include refid=&quot;Base_Column_List&quot; /&gt;\n       FROM users\n    &lt;/select&gt;\n    \n    &lt;select id=&quot;getOne&quot; parameterType=&quot;java.lang.Long&quot; resultMap=&quot;BaseResultMap&quot; &gt;\n   \t   SELECT \n       &lt;include refid=&quot;Base_Column_List&quot; /&gt;\n       FROM users\n       WHERE id = #{id}\n    &lt;/select&gt;\n    \n    &lt;insert id=&quot;insert&quot; parameterType=&quot;com.neo.entity.UserEntity&quot; &gt;\n        INSERT INTO \n\t    users\n\t    (userName,passWord,user_sex) \n\t    VALUES\n\t    (#{userName}, #{passWord}, #{userSex})\n    &lt;/insert&gt;\n    \n    &lt;update id=&quot;update&quot; parameterType=&quot;com.neo.entity.UserEntity&quot; &gt;\n       UPDATE \n\t    users \n\t       SET \n\t\t    &lt;if test=&quot;userName != null&quot;&gt;userName = #{userName},&lt;/if&gt;\n\t\t    &lt;if test=&quot;passWord != null&quot;&gt;passWord = #{passWord},&lt;/if&gt;\n\t\t    nick_name = #{nickName}\n\t       WHERE \n\t    id = #{id}\n    &lt;/update&gt;\n    \n    &lt;delete id=&quot;delete&quot; parameterType=&quot;java.lang.Long&quot; &gt;\n       DELETE FROM\n\t     users \n\t       WHERE \n\t     id =#{id}\n    &lt;/delete&gt;\n&lt;/mapper&gt;\n其实就是把上个版本中mapper的sql搬到了这里的xml中了\n3、编写Dao层的代码\npublic interface UserMapper {\n    List&lt;UserEntity&gt; getAll();\n    UserEntity getOne(Long id);\n    void insert(UserEntity user);\n    void update(UserEntity user);\n    void delete(Long id);\n}\n对比上一步这里全部只剩了接口方法\n</code></pre>\n<h2 id=\"idea自动导包\"><a class=\"markdownIt-Anchor\" href=\"#idea自动导包\"></a> idea自动导包</h2>\n<p>Settings  中 Build Execution Deploy  下的Importing  勾选<br />\nImport Maven projects  automatical …</p>\n<p><img src=\"https://yinglingxuan.github.io/img/Springboot1.png\" alt=\"img\" /></p>\n<p><img src=\"https://yinglingxuan.github.io/img/Sptingboot2.png\" alt=\"img\" /></p>\n<h2 id=\"自动生成getset方法的插件\"><a class=\"markdownIt-Anchor\" href=\"#自动生成getset方法的插件\"></a> 自动生成getset方法的插件</h2>\n<pre><code>&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;version&gt;1.18.4&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n使用注解\n@Data\n@ToString\n如果没有效果就\n1.File - &gt; setting - &gt; plugins\n2.点击Browse Repositories输入lombok\n3.点击安装\n4.重启IDEA\n</code></pre>\n<h2 id=\"更换连接池\"><a class=\"markdownIt-Anchor\" href=\"#更换连接池\"></a> 更换连接池</h2>\n<p>在mybatis包中的将连接池剔除掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--mybatis--&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t    &lt;exclusions&gt;</span><br><span class=\"line\">\t\t    &lt;!--排除数据库连接池--&gt;</span><br><span class=\"line\">\t\t    &lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t    &lt;groupId&gt;com.zaxxer&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t    &lt;artifactId&gt;HikariCP&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t\t    &lt;&#x2F;exclusion&gt;</span><br><span class=\"line\">\t    &lt;&#x2F;exclusions&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>在装入druid连接池\n&lt;dependency&gt;\n&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n&lt;version&gt;1.1.10&lt;/version&gt;\n&lt;/dependency&gt;\n直接启动就可以了https://hexo.io/docs/one-command-deployment.html)</code></pre>\n",
            "tags": [
                "Java",
                "Spring boot",
                "Mybatis"
            ]
        }
    ]
}